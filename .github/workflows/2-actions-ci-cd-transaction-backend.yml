name: "2 - Build Transaction Backend"
on:
  workflow_run:
    workflows: ["1 - Update provisioning K8S Cluster using Terraform"]
    branches: [main]
    types: 
      - completed

jobs:
    build:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: ubuntu-latest
        env:
          DOCKER_REPOSITORY: richiebono
          IMAGE_NAME: codebank-transaction-backend
          IMAGE_TAG: ${{github.run_number}} # ${{ github.sha }}
          WORKING_DIRECTORY: codebank
          CLUSTER_NAME: codebank-eks
          CLUSTER_REGION: us-east-1

        defaults:
          run:
            shell: bash
            working-directory: ${{ env.WORKING_DIRECTORY }}

        steps:
        - name: Checkout Code
          uses: actions/checkout@v2

        - name: QEMU
          uses: docker/setup-qemu-action@v1

        - name: Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v1 
          with:
            username: ${{ env.DOCKER_REPOSITORY }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        
        - name: Build Docker Image ${{ env.IMAGE_NAME }}
          run: docker build -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest .
          
        - name: Push Docker Image ${{ env.IMAGE_NAME }}
          run: docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}
        
        - name: Run Trivy Vulnerability Scanner
          uses: aquasecurity/trivy-action@master
          continue-on-error: true
          with:
            image-ref: 'docker.io/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest'
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'MEDIUM,HIGH,CRITICAL'

        - name: Install kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: 'v1.21.3'
          id: install

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.CLUSTER_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Update kube config
          run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }}

        - name: Deploy image to Amazon EKS
          run: |
            kubectl apply -f ../k8s/postgres/configmap.yaml
            kubectl apply -f ../k8s/postgres/persistent-volume.yaml
            kubectl apply -f ../k8s/postgres/persistent-volume-claim.yaml
            kubectl apply -f ../k8s/postgres/deploy.yaml
            kubectl apply -f ../k8s/postgres/service.yaml  
            kubectl apply -f ../k8s/pgadmin4/secret.yaml
            kubectl apply -f ../k8s/pgadmin4/configmap.yaml
            kubectl apply -f ../k8s/pgadmin4/service.yaml
            kubectl apply -f ../k8s/pgadmin4/statefulset.yaml            
          # kubectl apply -f ../k8s/apacke-kafka/namespace.yaml
          # kubectl apply -f ../k8s/apacke-kafka/zookeeper.yaml
          # kubectl apply -f ../k8s/apacke-kafka/kafka-broker.yaml
          # kubectl apply -f ../k8s/${{ env.WORKING_DIRECTORY }}/configmap.yaml
          # kubectl apply -f ../k8s/${{ env.WORKING_DIRECTORY }}/deploy.yaml
          # kubectl apply -f ../k8s/${{ env.WORKING_DIRECTORY }}/service.yaml            
          # kubectl apply -f ../k8s/grafana/persistent-volume-claim.yaml
          # kubectl apply -f ../k8s/grafana/deploy.yaml
          # kubectl apply -f ../k8s/grafana/Service.yaml

        - name: List kube nodes
          run: kubectl get svc