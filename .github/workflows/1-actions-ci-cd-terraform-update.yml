name: "1 - Update provisioning K8S Cluster using Terraform"
on:
  push:
          branches: [main]    
       
jobs:
    build:
        runs-on: ubuntu-latest
        env:
          DOCKER_REPOSITORY: richiebono
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_CLUSTER_NAME: bono-codebank-cluster
          TERRAFORM_VERSION: 1.2.6
          WORKING_DIRECTORY: terraform
          CLUSTER_REGION: us-east-1
          
        defaults:
          run:
            shell: bash
            working-directory: ${{ env.WORKING_DIRECTORY }}
            
        steps:
          - name: Checkout
            uses: actions/checkout@v3

          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v1
            # with:
            #   # terraform_version: 0.13.0:
            #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
       
          - name: Terraform Init
            id: init
            run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -backend-config="region=${{ env.CLUSTER_REGION }}" 
          
          - name: Terraform Plan
            id: plan
            # if: github.event_name == 'pull_request'
            run: terraform plan -no-color -input=false
            continue-on-error: true

          # - uses: actions/github-script@v6
          #   # if: github.event_name == 'pull_request'
          #   env:
          #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          #   with:
          #     script: |
          #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #       <details><summary>Show Plan</summary>
          #       \`\`\`\n
          #       ${process.env.PLAN}
          #       \`\`\`
          #       </details>
          #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          #       github.rest.issues.createComment({
          #         issue_number: context.issue.number,
          #         owner: context.repo.owner,
          #         repo: context.repo.repo,
          #         body: output
          #       })
                
          - name: Terraform Plan Status
            if: steps.plan.outcome == 'failure'
            run: exit 1

          - name: Terraform Apply
            # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
            run: terraform apply -auto-approve -input=false

          